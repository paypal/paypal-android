buildscript {

    ext.modules = [
            "sdkVersionName"      : "1.0.1-SNAPSHOT",
            "demoAppVersionCode"  : 2,
            "androidMinSdkVersion": 21,
            "androidTargetVersion": 30
    ]

    ext.versions = [
            "kotlin"    : "1.8.21",
            "compose"   : "1.4.7",
            "navigation": "2.3.5",
            "hilt"      : "2.44"
    ]

    ext.deps = [
            // Kotlin
            "kotlinStdLib"                : "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",

            // Android
            "androidxCoreKtx"             : "androidx.core:core-ktx:1.6.0",
            "androidxAppcompat"           : "androidx.appcompat:appcompat:1.3.1",

            "material"                    : "com.google.android.material:material:1.4.0",
            "constraintLayout"            : "androidx.constraintlayout:constraintlayout:2.1.0",
            "kotlinxAndroidCoroutines"    : "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1",
            "androidxLifecycleRuntimeKtx" : "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1",
            "androidxLifecycleCommonJava" : "androidx.lifecycle:lifecycle-common-java8:2.4.1",
            "fragmentKtx"                 : "androidx.fragment:fragment-ktx:1.6.0",

            // Jetpack Compose
            // Ref: https://developer.android.com/jetpack/compose/setup#setup-compose
            "composeMaterial3"            : "androidx.compose.material3:material3",
            "composeUi"                   : "androidx.compose.ui:ui",
            "composeUiTestJUnit4"         : "androidx.compose.ui:ui-test-junit4",
            "composeUiTestManifest"       : "androidx.compose.ui:ui-test-manifest",
            "composeUiTooling"            : "androidx.compose.ui:ui-tooling",
            "composeUiToolingPreview"     : "androidx.compose.ui:ui-tooling-preview",
            "composeRuntimeLivedata"      : "androidx.compose.runtime:runtime-livedata",
            "composeFoundation"           : "androidx.compose.foundation:foundation",
            "composeMaterial"             : "androidx.compose.material:material",
            "composeConstraintLayout"     : "androidx.constraintlayout:constraintlayout-compose",
            "lifecycleViewModelCompose"   : "androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1",
            "lifecycleRuntimeCompose"     : "androidx.lifecycle:lifecycle-runtime-compose:2.6.1",

            // Navigation Component
            "navigationFragment"          : "androidx.navigation:navigation-fragment-ktx:${versions.navigation}",
            "navigationUI"                : "androidx.navigation:navigation-ui-ktx:${versions.navigation}",

            // Jetpack
            "preference"                  : "androidx.preference:preference-ktx:1.1.1",

            // Networking
            "retrofit"                    : "com.squareup.retrofit2:retrofit:2.9.0",
            "gson"                        : "com.squareup.retrofit2:converter-gson:2.3.0",
            "loggingInterceptor"          : "com.squareup.okhttp3:logging-interceptor:4.9.2",

            // Dependency Injection
            "hilt"                        : "com.google.dagger:hilt-android:${versions.hilt}",
            "hiltKapt"                    : "com.google.dagger:hilt-compiler:${versions.hilt}",

            // Browser Switch
            "browserSwitch"               : "com.braintreepayments.api:browser-switch:2.3.1",

            // Testing
            "junit"                       : "junit:junit:4.13.2",
            "androidxJUnit"               : "androidx.test.ext:junit:1.1.5",
            "androidxEspressoCore"        : "androidx.test.espresso:espresso-core:3.4.0",
            "androidxTestCore"            : "androidx.test:core:1.5.0",
            "androidxTestRunner"          : "androidx.test:runner:1.5.2",
            "androidxTestRules"           : "androidx.test:rules:1.5.0",
            "androidxTestUiAutomator"     : "androidx.test.uiautomator:uiautomator:2.2.0",
            "mockk"                       : "io.mockk:mockk:1.13.5",
            "kotlinxAndroidCoroutinesTest": "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.1",
            "robolectric"                 : "org.robolectric:robolectric:4.10.3",
            "jsonAssert"                  : "org.skyscreamer:jsonassert:1.4.0",
            "striktMockk"                 : "io.strikt:strikt-mockk:0.30.1",
            "striktCore"                  : "io.strikt:strikt-core:0.30.1",
            "json" : "org.json:json:20220320",

            // PayPal
            "nativeCheckout"              : "com.paypal.checkout:android-sdk:1.1.0",

            // Release modules
            "cardPayments"                : "com.paypal.android:card-payments:${modules.sdkVersionName}",
            "paymentButtons"              : "com.paypal.android:payment-buttons:${modules.sdkVersionName}",
            "paypalWebPayments"           : "com.paypal.android:paypal-web-payments:${modules.sdkVersionName}",
            "paypalNativePayments"        : "com.paypal.android:paypal-native-payments:${modules.sdkVersionName}",
            "fraudProtection"             : "com.paypal.android:fraud-protection:${modules.sdkVersionName}",

    ]

    repositories {
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.4.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "com.dicedmelon.gradle:jacoco-android:0.1.5"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${versions.navigation}"
        classpath "com.google.dagger:hilt-android-gradle-plugin:${versions.hilt}"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "${detektVersion}"
    id 'org.jetbrains.kotlin.android' version '1.5.30' apply false
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

version modules.sdkVersionName // we add it here so that nexus automatically chooses staging or snapshot repo

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('SONATYPE_NEXUS_USERNAME') ?: ''
            password = System.getenv('SONATYPE_NEXUS_PASSWORD') ?: ''
            repositoryDescription = "Paypal Android SDK"
            packageGroup = "com.paypal"
        }
    }
    transitionCheckOptions {
        // give nexus sonatype more time to close the staging repository
        delayBetween.set(Duration.ofSeconds(20))
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()

        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }

        maven {
            url  "https://cardinalcommerceprod.jfrog.io/artifactory/android"
            credentials {
                username cardinalUsername
                password cardinalPassword
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:${detektVersion}"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-rules-libraries:${detektVersion}"
}

detekt {
    toolVersion = detektVersion
    config = files("detekt/detekt-config.yml")
    input = files(
            "CorePayments/src",
            "CardPayments/src",
            "PayPalWebPayments/src",
            "PayPalNativePayments/src",
            "FraudProtection/src",
            "Demo/src"
    )
    autoCorrect = project.hasProperty('detektAutoCorrect')
    reports {
        html {
            enabled = true
            destination = file("build/reports/detekt_report.html")
        }
    }
}

subprojects {
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "0.8.7"
                }
            }
        }
    }
}

subprojects {
    group = "com.paypal.android"
}

task incrementSnapshotVersion {
    doLast {
        def topLevelGradleFile = file('./build.gradle')
        def topLevelGradleFileText = topLevelGradleFile.getText('UTF-8')
        def matcher = topLevelGradleFileText =~ /"sdkVersionName"\s*: "(.*)",/
        def versionString = matcher[0][1]

        def (major, minor, patch) = versionString.tokenize('.')
        def patchInteger = (patch.endsWith('-SNAPSHOT') ? patch - '-SNAPSHOT' : patch).toInteger()

        def newVersion = "$major.$minor.${patchInteger + 1}-SNAPSHOT"
        def updatedScript =
                topLevelGradleFileText.replaceFirst(/("sdkVersionName"\s*: )".*",/, '$1"' + newVersion + '",')
        topLevelGradleFile.write(updatedScript, 'UTF-8')
    }
}

//./gradlew -PversionParam=0.0.1 changeReleaseVersion
task changeReleaseVersion {
    doLast {
        def topLevelGradleFile = file('./build.gradle')
        def topLevelGradleFileText = topLevelGradleFile.getText('UTF-8')
        def updatedScript =
                topLevelGradleFileText.replaceFirst(/("sdkVersionName"\s*: )".*",/, '$1"' + versionParam + '",')
        topLevelGradleFile.write(updatedScript, 'UTF-8')
    }
}

task getDemoAppVersionCode {
    doLast {
        def topLevelGradleFile = file('./build.gradle')
        def topLevelGradleFileText = topLevelGradleFile.getText('UTF-8')

        def matcher = topLevelGradleFileText =~ /"demoAppVersionCode"\s*: ([0-9]*),/
        def versionCode = matcher[0][1].toInteger()
        println(versionCode)
    }
}

//./gradlew -PdemoAppVersionCodeParam=0.0.1 changeReleaseVersion
task setDemoAppVersionCode {
    doLast {
        def topLevelGradleFile = file('./build.gradle')
        def topLevelGradleFileText = topLevelGradleFile.getText('UTF-8')
        def updatedScript =
            topLevelGradleFileText.replaceFirst(/("demoAppVersionCode"\s*: )[0-9]*,/, '$1' + demoAppVersionCodeParam + ',')
        topLevelGradleFile.write(updatedScript, 'UTF-8')
    }
}

//./gradlew -PversionParam=0.0.1 changeReleaseVersion
task updateCHANGELOGVersion {
    doLast {
        def date = new Date()
        def formattedDate = date.format('yyyy-MM-dd')
        def changelogFile = new File('CHANGELOG.md')
        def changelogFileText = changelogFile.text.replaceFirst("## unreleased", "## " + versionParam + " ($formattedDate)")
        changelogFile.write(changelogFileText)
    }
}
