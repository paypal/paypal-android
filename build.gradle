buildscript {
    ext.modules = [
            "sdkVersionName"      : "1.5.1-SNAPSHOT",
            "demoAppVersionCode"  : 4,
            "androidMinSdkVersion": 21,
            "androidTargetVersion": 35
    ]
}

plugins {
    alias libs.plugins.android.application apply false
    alias libs.plugins.android.library apply false
    alias libs.plugins.dagger.hilt apply false
    alias libs.plugins.detekt
    alias libs.plugins.gradlePlayPublisher apply false
    alias libs.plugins.jacocoAndroid apply false
    alias libs.plugins.kotlinAndroid apply false
    alias libs.plugins.kotlinParcelize apply false
    alias libs.plugins.kotlinKapt apply false
    alias libs.plugins.nexus.publishPlugin
}

version modules.sdkVersionName // we add it here so that nexus automatically chooses staging or snapshot repo

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('SONATYPE_NEXUS_USERNAME') ?: ''
            password = System.getenv('SONATYPE_NEXUS_PASSWORD') ?: ''
            repositoryDescription = "Paypal Android SDK"
            packageGroup = "com.paypal"
        }
    }
    transitionCheckOptions {
        // give nexus sonatype more time to close the staging repository
        delayBetween.set(Duration.ofSeconds(20))
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:${detektVersion}"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-rules-libraries:${detektVersion}"
}

detekt {
    toolVersion = detektVersion
    config = files("detekt/detekt-config.yml")
    input = files(
            "CorePayments/src",
            "CardPayments/src",
            "PayPalWebPayments/src",
            "PayPalNativePayments/src",
            "FraudProtection/src",
            "Demo/src"
    )
    autoCorrect = project.hasProperty('detektAutoCorrect')
    reports {
        html {
            enabled = true
            destination = file("build/reports/detekt_report.html")
        }
    }
}

subprojects {
    group = "com.paypal.android"
}

task incrementSnapshotVersion {
    doLast {
        def topLevelGradleFile = file('./build.gradle')
        def topLevelGradleFileText = topLevelGradleFile.getText('UTF-8')
        def matcher = topLevelGradleFileText =~ /"sdkVersionName"\s*: "(.*)",/
        def versionString = matcher[0][1]

        def (major, minor, patch) = versionString.tokenize('.')
        def patchInteger = (patch.endsWith('-SNAPSHOT') ? patch - '-SNAPSHOT' : patch).toInteger()

        def newVersion = "$major.$minor.${patchInteger + 1}-SNAPSHOT"
        def updatedScript =
                topLevelGradleFileText.replaceFirst(/("sdkVersionName"\s*: )".*",/, '$1"' + newVersion + '",')
        topLevelGradleFile.write(updatedScript, 'UTF-8')
    }
}

//./gradlew -PversionParam=0.0.1 changeReleaseVersion
task changeReleaseVersion {
    doLast {
        def topLevelGradleFile = file('./build.gradle')
        def topLevelGradleFileText = topLevelGradleFile.getText('UTF-8')
        def updatedScript =
                topLevelGradleFileText.replaceFirst(/("sdkVersionName"\s*: )".*",/, '$1"' + versionParam + '",')
        topLevelGradleFile.write(updatedScript, 'UTF-8')
    }
}

task getDemoAppVersionCode {
    doLast {
        def topLevelGradleFile = file('./build.gradle')
        def topLevelGradleFileText = topLevelGradleFile.getText('UTF-8')

        def matcher = topLevelGradleFileText =~ /"demoAppVersionCode"\s*: ([0-9]*),/
        def versionCode = matcher[0][1].toInteger()
        println(versionCode)
    }
}

//./gradlew -PdemoAppVersionCodeParam=0.0.1 changeReleaseVersion
task setDemoAppVersionCode {
    doLast {
        def topLevelGradleFile = file('./build.gradle')
        def topLevelGradleFileText = topLevelGradleFile.getText('UTF-8')
        def updatedScript =
                topLevelGradleFileText.replaceFirst(/("demoAppVersionCode"\s*: )[0-9]*,/, '$1' + demoAppVersionCodeParam + ',')
        topLevelGradleFile.write(updatedScript, 'UTF-8')
    }
}

//./gradlew -PversionParam=0.0.1 changeReleaseVersion
task updateCHANGELOGVersion {
    doLast {
        def date = new Date()
        def formattedDate = date.format('yyyy-MM-dd')
        def changelogFile = new File('CHANGELOG.md')
        def changelogFileText = changelogFile.text.replaceFirst("## unreleased", "## " + versionParam + " ($formattedDate)")
        changelogFile.write(changelogFileText)
    }
}
