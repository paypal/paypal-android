plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'com.github.triplet.play' version '3.8.4'
}

def paypalProperties = loadPropertiesFromFile("paypal.properties")

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.paypal.android"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode modules.demoAppVersionCode
        versionName modules.sdkVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "CLIENT_ID", paypalProperties["CLIENT_ID"] ?: "\"\"")
    }

    buildFeatures {
        // Ref: https://developer.android.com/jetpack/compose/setup
        compose true
        viewBinding = true
    }

    composeOptions {
        // Ref: https://developer.android.com/jetpack/androidx/releases/compose-kotlin#pre-release_kotlin_compatibility
        kotlinCompilerExtensionVersion "${versions.compose}"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    lintOptions {
        lintConfig file('../lint.xml')
        abortOnError true
        warningsAsErrors true
    }

    sourceSets {
        androidTest {
            java.srcDirs += "src/androidTestShared/java"
        }
    }

    // https://developer.android.com/build/build-variants#groovy
    signingConfigs {
        release {
            storeFile file(System.getenv('DEMO_KEYSTORE_FILE') ?: 'debug.keystore')
            storePassword System.getenv('DEMO_KEYSTORE_PASSWORD') ?: 'android'
            keyAlias System.getenv('DEMO_KEY_ALIAS') ?: 'androiddebugkey'
            keyPassword System.getenv('DEMO_KEY_PASSWORD') ?: 'android'
        }
    }
    buildTypes {
        release {
            debuggable false
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
        }
    }
}

play {
    // Ref: https://github.com/Triple-T/gradle-play-publisher/issues/979#issuecomment-884763388
    releaseStatus.set(com.github.triplet.gradle.androidpublisher.ReleaseStatus.DRAFT)
    serviceAccountCredentials.set(file(System.getenv("DEMO_GCP_SERVICE_ACCOUNT_CREDENTIALS_FILE") ?: '/path/to/credential_file.json'))
}

// Ref: https://developer.android.com/training/dependency-injection/hilt-android#setup
kapt {
    // allow references to generated code
    correctErrorTypes true
}

dependencies {
    debugImplementation project(':CardPayments')
    debugImplementation project(':FraudProtection')
    debugImplementation project(':PayPalNativePayments')
    debugImplementation project(':PayPalWebPayments')
    debugImplementation project(':PaymentButtons')
    debugImplementation project(':Venmo')

    releaseImplementation deps.cardPayments
    releaseImplementation deps.paymentButtons
    releaseImplementation deps.paypalWebPayments
    releaseImplementation deps.paypalNativePayments
    releaseImplementation deps.fraudProtection

    implementation deps.kotlinStdLib
    implementation deps.androidxCoreKtx
    implementation deps.androidxAppcompat
    implementation deps.material
    implementation deps.constraintLayout
    implementation deps.androidxLifecycleRuntimeKtx
    implementation deps.fragmentKtx

    // TODO: remove dependency when we don't relay on nxo models anymore
    implementation (deps.nativeCheckout) {
        exclude module: 'data-collector'
    }

    // Compose Bill of Materials (BOM) dependency manages compose dependency versions without
    // us having to explicitly state versions of individual compose dependencies; the BOM project
    // selects dependency versions for each compose dependency that are known by the JetPack team
    // to be compatible with one another. The set of dependencies output by the bom have been tested
    // and are known to be compatible by the Jetpack Team
    // More info: https://developer.android.com/jetpack/compose/bom
    def composeBom = platform('androidx.compose:compose-bom:2023.05.01')
    implementation composeBom
    androidTestImplementation composeBom

    implementation deps.composeMaterial3
    implementation deps.composeUiToolingPreview
    debugImplementation deps.composeUiTooling

    implementation deps.lifecycleViewModelCompose
    implementation deps.lifecycleRuntimeCompose

    implementation deps.navigationFragment
    implementation deps.navigationUI
    implementation deps.preference

    implementation deps.retrofit
    implementation deps.gson
    implementation deps.loggingInterceptor

    implementation deps.hilt
    kapt deps.hiltKapt

    testImplementation deps.junit

    androidTestImplementation deps.androidxJUnit
    androidTestImplementation deps.androidxEspressoCore
    androidTestImplementation deps.androidxTestRunner
    androidTestImplementation deps.androidxTestRules
    androidTestImplementation deps.androidxTestUiAutomator

    // compose ui-test
    androidTestImplementation deps.composeUiTestJUnit4
    debugImplementation deps.composeUiTestManifest
}

/**
 * Loads properties at the specified file path. If the file does not exist,
 * this method returns an empty properties object.
 * @param filePath
 */
def loadPropertiesFromFile(filePath) {
    def result = new Properties()
    try {
        result.load(new FileInputStream(rootProject.file(filePath)))
    } catch (e) { /* ignored */ }
    return result
}
