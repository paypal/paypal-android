name: Release On Merge To Main
on:
  push:
    branches:
      - main
env:
  SIGNING_KEY_FILE_PATH: /home/runner/secretKey.gpg
jobs:
  # Extract version from build.gradle
  extract_version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Get version from build.gradle
        id: get_version
        run: |
          echo "::group::Extracting SDK Version from build.gradle"
          echo "⏱️ $(date): Starting version extraction process"

          # Check if build.gradle exists
          if [ ! -f "build.gradle" ]; then
            echo "::error::❌ build.gradle file not found! Aborting release process."
            echo "📋 Current directory: $(pwd)"
            echo "📋 Directory contents: $(ls -la)"
            exit 1
          fi

          echo "📋 File exists check: ✅ build.gradle found"

          # Extract version from build.gradle with error handling
          VERSION_MATCH=$(grep -o '"sdkVersionName"\s*:\s*"[^"]*"' build.gradle || echo "NO_MATCH")

          if [ "$VERSION_MATCH" = "NO_MATCH" ]; then
            echo "::error::❌ Could not find sdkVersionName pattern in build.gradle"
            exit 1
          fi

          VERSION=$(echo $VERSION_MATCH | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+[^"]*' || echo "INVALID_VERSION")

          if [ "$VERSION" = "INVALID_VERSION" ] || [ -z "$VERSION" ]; then
            echo "::error::❌ Found sdkVersionName but couldn't extract valid version number"
            exit 1
          fi
          
          echo "✅ Extracted version: $VERSION"

          # Validate version format (basic semver check)
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "::warning::⚠️ Version format may not follow semver: $VERSION"
            echo "📋 Expected format: major.minor.patch or major.minor.patch-label"
          else
            echo "✅ Version format validation passed"
          fi

          echo "⏱️ $(date): Completed version extraction successfully"
          echo "🔖 Setting output variable 'version' to: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  #First we build
  build_aar:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'
          #After decoding the secret key, place the file in ~ /. Gradle/ secring.gpg
      - name: Decode Signing Key
        uses: ./.github/actions/decode_signing_key_action
        with:
          signing_key_file: ${{ secrets.SIGNING_KEY_FILE }}
          signing_file_path: ${{ env.SIGNING_KEY_FILE_PATH }}
      - name: Assemble
        run: |
          echo "::group::Building SDK modules (excluding Demo)"
          echo "⏱️ $(date): Starting build process for all SDK modules"

          # Check if signing key exists
          if [ ! -f "${{ env.SIGNING_KEY_FILE_PATH }}" ]; then
            echo "::warning::⚠️ Signing key file not found at ${{ env.SIGNING_KEY_FILE_PATH }}"
            echo "📋 This may cause signing failures during build"
          else
            echo "📋 Signing key file check: ✅ Key file found"
          fi

          # Check environment variables required for signing
          if [ -z "${{ secrets.SIGNING_KEY_ID }}" ]; then
            echo "::warning::⚠️ SIGNING_KEY_ID environment variable is empty"
          else
            echo "📋 SIGNING_KEY_ID environment variable: ✅ Present"
          fi

          if [ -z "${{ secrets.SIGNING_KEY_PASSWORD }}" ]; then
            echo "::warning::⚠️ SIGNING_KEY_PASSWORD environment variable is empty"
          else
            echo "📋 SIGNING_KEY_PASSWORD environment variable: ✅ Present"
          fi

          echo "🚀 Executing Gradle assemble task (excluding Demo module)"

          ./gradlew --stacktrace assemble -x :Demo:assemble

          BUILD_RESULT=$?
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "::error::❌ Build failed with exit code $BUILD_RESULT"
            echo "📋 Possible reasons:"
            echo "  - Compilation errors in code"
            echo "  - Dependency resolution issues"
            echo "  - Signing configuration problems"
            echo "  - Gradle plugin compatibility issues"
            exit $BUILD_RESULT
          fi

          echo "✅ $(date): Build completed successfully"
          echo "::endgroup::"
        env:
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_KEY_FILE: ${{ env.SIGNING_KEY_FILE_PATH }}

  #Once building is finished, we unit test every module in parallel
  unit_test_core:
    name: CorePayments Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'
      - name: Run Unit Tests
        uses: ./.github/actions/unit_test_module
        with:
          module: CorePayments

  unit_test_card:
    name: CardPayments Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'
      - name: Run Unit Tests
        uses: ./.github/actions/unit_test_module
        with:
          module: CardPayments
  unit_test_paypal_web:
    name: PayPal Web Payments Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'
      - name: Run Unit Tests
        uses: ./.github/actions/unit_test_module
        with:
          module: PayPalWebPayments
  unit_test_fraud_protection:
    name: Fraud Protection Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'
      - name: Run Unit Tests
        uses: ./.github/actions/unit_test_module
        with:
          module: FraudProtection

  unit_test_finished:
    needs: [unit_test_card, unit_test_core, unit_test_paypal_web, unit_test_fraud_protection]
    name: All Unit Test finished
    runs-on: ubuntu-latest
    steps:
      - name: Summary of Unit Test Results
        run: |
          echo "::group::Unit Testing Summary"
          echo "✅ $(date): All unit tests have completed successfully!"
          echo "📋 Test Results by Module:"
          echo "  ✅ CorePayments: Passed"
          echo "  ✅ CardPayments: Passed"
          echo "  ✅ PayPalWebPayments: Passed"
          echo "  ✅ FraudProtection: Passed"
          echo ""
          echo "⏱️ Ready to proceed to the publishing step"
          echo "::endgroup::"

  # after build and unit tests are finished, publish all modules at once
  # to help reduce the probability of failure when interacting with sonatype servers
  publish_all_modules:
    needs: [ unit_test_finished, build_aar, extract_version ]
    name: Publish All Modules To Sonatype
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'
      - name: Decode Signing Key
        uses: ./.github/actions/decode_signing_key_action
        with:
          signing_key_file: ${{ secrets.SIGNING_KEY_FILE }}
          signing_file_path: ${{ env.SIGNING_KEY_FILE_PATH }}
      - name: Log Version
        run: |
          # Use extracted version from build.gradle
          echo "Using version from build.gradle: ${{ needs.extract_version.outputs.version }}"
      - name: Publish All Modules
        uses: ./.github/actions/publish_all_modules
        with:
          sonatype_usr: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          sonatype_pwd: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          signing_key_id: ${{ secrets.SIGNING_KEY_ID }}
          signing_key_pwd: ${{ secrets.SIGNING_KEY_PASSWORD }}
          signing_key_file: ${{ env.SIGNING_KEY_FILE_PATH }}

  # Once all releases are done, we bump version, tag it and prepare next
  bump_version:
    needs: [ publish_all_modules, extract_version ]
    name: Bump Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'
      - name: Set github user
        uses: ./.github/actions/set_github_user
      - name: Tag and Release
        run: |
          echo "::group::Creating Git Tag for Release"
          # Use extracted version from build.gradle
          VERSION="${{ needs.extract_version.outputs.version }}"
          echo "⏱️ $(date): Starting release tagging process"
          echo "🔖 Using version from build.gradle: $VERSION"

          # Check if tag already exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "::error::❌ Tag $VERSION already exists in the repository"
            echo "📋 This indicates:"
            echo "  - A release with this version was already created"
            echo "  - You need to increment the version number before releasing again"

            echo "📋 Existing tag details:"
            git show "$VERSION"

            echo "❌ Release process cannot continue with duplicate tag"
            exit 1
          fi

          echo "📋 Tag check: ✅ Tag $VERSION doesn't exist yet"

          # CHANGELOG is already updated by the release PR process
          # Create the tag with annotated message
          echo "⏱️ Creating annotated tag $VERSION"
          git tag $VERSION -a -m "Release $VERSION, automated from main branch by ${{ github.actor }}"

          TAG_RESULT=$?
          if [ $TAG_RESULT -ne 0 ]; then
            echo "::error::❌ Failed to create tag $VERSION"
            echo "📋 Git error code: $TAG_RESULT"
            exit $TAG_RESULT
          fi

          echo "✅ Tag created successfully"

          # Push the tag to origin
          echo "⏱️ Pushing tag $VERSION to origin"
          git push origin $VERSION

          PUSH_RESULT=$?
          if [ $PUSH_RESULT -ne 0 ]; then
            echo "::error::❌ Failed to push tag $VERSION to origin"
            exit $PUSH_RESULT
          fi

          echo "✅ Tag pushed to origin successfully"
          echo "::endgroup::"

      - name: Save changelog entries to a file
        run: |
          echo "::group::Extracting Changelog Entries"
          echo "⏱️ $(date): Extracting changelog entries for the GitHub release"

          # Check if CHANGELOG.md exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "::error::❌ CHANGELOG.md file not found"
            echo "📋 Current directory: $(pwd)"
            echo "📋 Directory contents: $(ls -la)"
            exit 1
          fi

          echo "📋 CHANGELOG.md check: ✅ File exists"

          # Extract the content between the first two headings
          echo "⏱️ Extracting release notes from CHANGELOG.md"
          sed -e '1,/##/d'e '/##/,$d' CHANGELOG.md > changelog_entries.md

          # Check if extraction was successful
          if [ ! -s "changelog_entries.md" ]; then
            echo "::warning::⚠️ Extracted changelog is empty"
            echo "📋 This may indicate incorrect formatting in CHANGELOG.md"
            echo "📋 First 10 lines of CHANGELOG.md:"
            head -n 10 CHANGELOG.md

            # Create a minimal fallback entry
            echo "Creating fallback changelog entry"
            echo "Release version ${{ needs.extract_version.outputs.version }}" > changelog_entries.md
          else
            echo "✅ Changelog entries extracted successfully"
            echo "📋 Preview of extracted changelog entries:"
            head -n 5 changelog_entries.md
          fi
          echo "::endgroup::"

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.extract_version.outputs.version }}
          release_name: ${{ needs.extract_version.outputs.version }}
          body_path: changelog_entries.md
          draft: false
          prerelease: false

      - name: Release Creation Summary
        if: always()
        run: |
          echo "::group::GitHub Release Creation Summary"
          echo "⏱️ $(date): GitHub release creation process completed"

          if [ "${{ steps.create_release.outcome }}" == "success" ]; then
            echo "✅ GitHub release for ${{ needs.extract_version.outputs.version }} created successfully"
            echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"
          else
            echo "::error::❌ GitHub release creation failed"
            echo "📋 This might be due to:"
            echo "  - Tag ${{ needs.extract_version.outputs.version }} not being available"
            echo "  - GitHub API rate limiting"
            echo "  - Insufficient permissions"
            echo "  - Network connectivity issues"
          fi
          echo "::endgroup::"